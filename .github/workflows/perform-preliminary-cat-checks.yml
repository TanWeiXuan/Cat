name: Perform preliminary checks on cats in PR

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
    paths:
      - 'cats/*.png'

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: pr-code
          fetch-depth: 0
      
      - uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.base_ref }}
          path: main-repo
          fetch-depth: 0

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: | 
          pip install pillow

      - name: Determine new / modified cats
        id: changes
        run: |
          set -e
          cd pr-code

          if [[ "${{ github.event.action }}" == "opened" || "${{ github.event.action }}" == "reopened" ]]; then
              png_files=$(git diff --name-status $(git merge-base origin/${{ github.base_ref }} HEAD) HEAD \
                          | awk '$1=="A" || $1=="M" {print $2}' \
                          | grep '^cats/.*\.png$' || true)
          else
              latest_commit="${{ github.event.after }}"
              png_files=$(git diff-tree --no-commit-id --name-status -r "$latest_commit" \
                          | awk '$1=="A" || $1=="M" {print $2}' \
                          | grep '^cats/.*\.png$' || true)
          fi

          echo "png_files<<EOF" >> $GITHUB_OUTPUT
          echo "$png_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run script for new / modified cats
        run: |
          if [[ -z "${{ steps.changes.outputs.png_files }}" ]]; then
            echo "No PNGs changed."
            exit 0
          fi

          # Safely convert multi-line string to array
          mapfile -t files <<< "${{ steps.changes.outputs.png_files }}"

          for f in "${files[@]}"; do
            echo "Running script on '$f'"
            python main-repo/scripts/cat_checker.py "pr-code/$f"
          done

      - name: Collect reports
        id: collect-reports
        run: |
          set -e
          found_reports=0
          cd main-repo

          for f in reports/*_preliminary_check_report.md; do
            if [ -e "$f" ]; then
              found_reports=1
              echo "Processing $f"

              comment_body="${comment_body}$(cat "$f")"$'\n\n'
            fi
          done

          if [ "$found_reports" -eq 1 ]; then
            {
              echo "comment_body<<EOF"
              echo "$comment_body"
              echo "EOF"
              echo "found_reports=$found_reports"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Upload report images as artifact
        uses: actions/upload-artifact@v4
        id: cat-check-artifact-upload
        with:
          name: cat-check-images
          path: main-repo/reports/*_changes.png
          if-no-files-found: ignore
      
      - name: Post PR comment with results
        if: steps.collect-reports.outputs.found_reports == '1'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.CAT_CHECKER_BOT_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preliminary Cat Check Results ##
            <small>This is an automated action</small>
            <small>Any template violations are highlighted in red in the attached images</small>

            ${{ steps.collect-reports.outputs.comment_body }}

            ---
            Any images generated by the checks have been uploaded as an artifact: 
            [cat-check-images](${{ steps.cat-check-artifact-upload.outputs.artifact-url }})

